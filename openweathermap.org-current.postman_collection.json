{
	"info": {
		"_postman_id": "6096cb43-bca0-48b0-97f2-e7f49c2e42d3",
		"name": "openweathermap.org/current",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Request should return corect data when city id is correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "def470e3-c935-49d3-907e-d4215e78fae6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"State name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "20ffdc31-cfe5-4271-9d5a-adc2a7ad4ad9",
						"exec": [
							"pm.globals.set(\"cityId\", \"14256\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "auth",
						"value": "eyJpdiI6Ik5TcVJhSGxQXC92aUZtd3NsendYSnBnPT0iLCJ2YWx1ZSI6IlhhOVdlQjltQjNHUXdEUThKcTlkb0RlU0l1Rk0zZnZQdHArbjNrNzV2d1Q2TXlBSHFQWGwxTVl5N2Vlc1FGcTdNOWxYa2pNaCtkMXdQQ3FXOE5PNkV3PT0iLCJtYWMiOiIzYzZkMjYxYzRjM2NlZDk5OWQ4YmQ0YTE4ODRmNTYxNTc3OTBjMTA4ZjkxNTY3ZDFlOGI3OTk3Y2Y3MDA1NGEwIn0%3D",
						"type": "text"
					}
				],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?id={{cityId}}&appid={{APIkey}}\n",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "id",
							"value": "{{cityId}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}\n"
						}
					]
				},
				"description": "Test for check is correct data response when city id is correct.Test float possitive."
			},
			"response": []
		},
		{
			"name": "Request should return authorization error when  API key is incorrect",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39d8b73e-b376-4cbc-9e23-39c0def0338a",
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Authorization error messsage\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "auth",
						"type": "text",
						"value": "eyJpdiI6Ik5TcVJhSGxQXC92aUZtd3NsendYSnBnPT0iLCJ2YWx1ZSI6IlhhOVdlQjltQjNHUXdEUThKcTlkb0RlU0l1Rk0zZnZQdHArbjNrNzV2d1Q2TXlBSHFQWGwxTVl5N2Vlc1FGcTdNOWxYa2pNaCtkMXdQQ3FXOE5PNkV3PT0iLCJtYWMiOiIzYzZkMjYxYzRjM2NlZDk5OWQ4YmQ0YTE4ODRmNTYxNTc3OTBjMTA4ZjkxNTY3ZDFlOGI3OTk3Y2Y3MDA1NGEwIn0%3D"
					}
				],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?id=2172797&appid={{InvalidAPIkey}}\n",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "id",
							"value": "2172797"
						},
						{
							"key": "appid",
							"value": "{{InvalidAPIkey}}\n"
						}
					]
				},
				"description": "Test for check is response returns authorization error when API key is incorrect. Test pass"
			},
			"response": []
		},
		{
			"name": "Request should return correct data when authorization API key is correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "759363ff-99b6-4ebd-8cfc-91aa29cd0fb6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"State name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "auth",
						"type": "text",
						"value": "eyJpdiI6Ik5TcVJhSGxQXC92aUZtd3NsendYSnBnPT0iLCJ2YWx1ZSI6IlhhOVdlQjltQjNHUXdEUThKcTlkb0RlU0l1Rk0zZnZQdHArbjNrNzV2d1Q2TXlBSHFQWGwxTVl5N2Vlc1FGcTdNOWxYa2pNaCtkMXdQQ3FXOE5PNkV3PT0iLCJtYWMiOiIzYzZkMjYxYzRjM2NlZDk5OWQ4YmQ0YTE4ODRmNTYxNTc3OTBjMTA4ZjkxNTY3ZDFlOGI3OTk3Y2Y3MDA1NGEwIn0%3D"
					}
				],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?id=2172797&appid={{APIkey}}\n",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "id",
							"value": "2172797"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}\n"
						}
					]
				},
				"description": "Test for check is correct data response when API key is correct.Test flow positive."
			},
			"response": []
		},
		{
			"name": "Request should return correct data when city  is correct (lat lon) geographic coordinates",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fda1ac7-ac0a-4901-85e8-3a4859c34885",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"State name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "683657cb-17d7-4d08-bd05-0176585698f6",
						"exec": [
							"pm.globals.set(\"lon\", \"139.5556\");\r",
							"pm.globals.set(\"lat\", \"35.5556\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "auth",
						"type": "text",
						"value": "eyJpdiI6Ik5TcVJhSGxQXC92aUZtd3NsendYSnBnPT0iLCJ2YWx1ZSI6IlhhOVdlQjltQjNHUXdEUThKcTlkb0RlU0l1Rk0zZnZQdHArbjNrNzV2d1Q2TXlBSHFQWGwxTVl5N2Vlc1FGcTdNOWxYa2pNaCtkMXdQQ3FXOE5PNkV3PT0iLCJtYWMiOiIzYzZkMjYxYzRjM2NlZDk5OWQ4YmQ0YTE4ODRmNTYxNTc3OTBjMTA4ZjkxNTY3ZDFlOGI3OTk3Y2Y3MDA1NGEwIn0%3D"
					}
				],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?appid={{APIkey}}&lon={{lon}}&lat={{lat}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "appid",
							"value": "{{APIkey}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "lat",
							"value": "{{lat}}"
						}
					]
				},
				"description": "This test should return correct data when lan and lon is correct. "
			},
			"response": []
		},
		{
			"name": "Request should return correct data when city name is correct/htlm mode",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93974bdd-d841-4f88-a501-8e1305d526f9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const $ = cheerio.load(pm.response.text())\r",
							"\r",
							"pm.test(\"should return a html\", () => { \r",
							"    pm.expect($('html').text()).to.not.be.empty \r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2ff77d98-0b64-48c3-b95f-d4b64c00c4a9",
						"exec": [
							"pm.globals.get(\"q\");\r",
							"pm.globals.set(\"mode_html\", \"html\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q={{q}}&mode={{mode_html}}&appid={{APIkey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "{{q}}"
						},
						{
							"key": "mode",
							"value": "{{mode_html}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "+ Expected correct response html form when given data is correct. Pre-req part - status code 200 and to check is a response returns like html form."
			},
			"response": []
		},
		{
			"name": "Request should return corect data when city name is correct/xml mode",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88f004d0-f1d8-491b-9297-63a75116dd9b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9ef5dffc-af03-4081-8eed-e6e9126e58bc",
						"exec": [
							"\r",
							"let cities = [\"Vilnius\", \"Tallinn\", \"Riga\", \"Stockholm\", \"London\", \"Kopenhagen\", \"Berlin\", \"Oslo\", \"Moscow\", \"Taglag\", \"Qabāghlū\", \"Ḩeşār-e Sefīd\"];\r",
							"let randomCities = cities[Math.floor(Math.random() * cities.length)];\r",
							"\r",
							"pm.globals.set(\"q\", randomCities);\r",
							"\r",
							"let langCode = [\"lt\", \"en\", \"af\", \"al\", \"ar\", \"az\", \"bg\", \"ca\", \"cz\", \"da\", \"de\", \"el\",\"eu\", \"fa\", \"fi\", \"fr\", \"gl\", \"he\", \"hi\", \"hr\", \"hu\", \"id\", \"it\", \"ja\"];\r",
							"let randomLang = langCode[Math.floor(Math.random() * langCode.length)];\r",
							"\r",
							"pm.globals.set(\"langCode\", randomLang);\r",
							"\r",
							"let mainTemp = [\"default\", \"metric\", \"imperial\"];\r",
							"let randomUnits = mainTemp[Math.floor(Math.random() * mainTemp.length)];\r",
							"\r",
							"pm.globals.set(\"mainTemp\", randomUnits);\r",
							"\r",
							"let mode = [\"xml\", \"html\", \"json\"];\r",
							"let randomMode = mode[Math.floor(Math.random() * mode.length)];\r",
							"\r",
							"pm.globals.set(\"mode\", randomMode);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/weather?q={{q}}&lang={{langCode}}&units={{mainTemp}}&mode={{mode}}&appid={{APIkey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "{{q}}"
						},
						{
							"key": "lang",
							"value": "{{langCode}}"
						},
						{
							"key": "units",
							"value": "{{mainTemp}}"
						},
						{
							"key": "mode",
							"value": "{{mode}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "I made some random generation: random Cities, random language code, random units for temperature and random mode for xml, html and json formats. It seems works good."
			},
			"response": []
		},
		{
			"name": "Request should return message error bad request with negative  id number, but response just skip bad  negative request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d0df91f-146f-4caa-9d9c-48ec9967732b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1559cd57-26a2-4aa5-90a3-df6d44764ff8",
						"exec": [
							"pm.globals.set(\"cityIdMulti\", \"-524901,703448,2643743,14256,14256,14256,14256,14256,14256,14256,14256,14256,14256,14256,14256,v,14256,14256,14256,14256\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/group?id={{cityIdMulti}}&appid={{APIkey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"group"
					],
					"query": [
						{
							"key": "id",
							"value": "{{cityIdMulti}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "Request should return message error bad request with negative  id number, but there no any reaction, just ignore that id number with negative meaning.\r\nShould return message error - bad request, negative id not allowed."
			},
			"response": []
		},
		{
			"name": "Request should return validation error bad request when city id  is letter or negative number, but response just skips bad  requests, but counts like it's one of city IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ea4138d2-5be1-4d47-babd-cf405733cb20",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches error code\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"400\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id list must be in range from 1 to 20\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "078d255c-d44f-47ae-b70b-a9fa484ad59b",
						"exec": [
							"pm.globals.set(\"cityIdMulti\", \"b,-524901,703448,2643743,14256,14256,14256,14256,14256,14256,14256,14256,14256,14256,14256,14256,v,14256,14256,14256,gbn14256\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/2.5/group?id={{cityIdMulti}}&appid={{APIkey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"group"
					],
					"query": [
						{
							"key": "id",
							"value": "{{cityIdMulti}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "1. Request should return validatione error bad request with a letter or negative number, or mixed(numbers with letters) id number, but there no any reaction, just ignore that id number is invalid. \r\nShould return validation error - bad request, city ID should be a float. \r\n2. This test should check is it realy returns error message with too long requested list and to check is the program counts all \"city IDs\" given no metter is it valid or not.\r\nAll given \"city IDs\" counts like valid, and returns message error with too long list of cities IDs (the range between 1-20).\r\n3. The same city ID number indicated like new one. It should not be."
			},
			"response": []
		},
		{
			"name": "Request should return code error 500 Internal server error when 2.5 is not given",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7563f77f-ab1b-46fe-a18b-68d2dfbf26a9",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Error code should be 500, but not 404\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"404\");\r",
							"});\r",
							"pm.test(\"Error messag\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Internal error\");\r",
							"});\r",
							"\r",
							"pm.globals.get(\"q\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "724a8aae-1b2c-4463-8702-9d46bf393771",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.openweathermap.org/data/weather?q={{q}}&appid={{APIkey}}",
					"protocol": "https",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"weather"
					],
					"query": [
						{
							"key": "q",
							"value": "{{q}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "!I wanted to check what returns request when /2.5/ is not given ()i guess it's some internal value. I got response with 404 code-bad request, but error message - Internal Error. It would be nice to get error code 500. !"
			},
			"response": []
		},
		{
			"name": "Request should return validation error when city name is not given",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "907263fd-d87a-4f6f-9aad-fb7292e259c0",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error code\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"400\");\r",
							"});\r",
							"pm.test(\"Error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Nothing to geocode\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5578e718-06ab-424d-bee6-80cf80a5ee32",
						"exec": [
							"pm.globals.set(\"q_empty\", \"\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?appid={{APIkey}}&q={{q_empty}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "appid",
							"value": "{{APIkey}}"
						},
						{
							"key": "q",
							"value": "{{q_empty}}"
						}
					]
				},
				"description": "Request without city name (empty) returns status code 400 us a bad request, but it could be error message like - \"City name is requared\". "
			},
			"response": []
		},
		{
			"name": "Request should return correct data when ZIP code is correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74f537d3-d0a3-4561-9865-ed431d0e174c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"City name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"pm.test(\"City name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "cc56f712-91e0-4ee3-ab66-782b9dca3942",
						"exec": [
							"pm.globals.set(\"zipCode\", \"99501,US\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?zip={{zipCode}}&appid={{APIkey}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "zip",
							"value": "{{zipCode}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "Gaved correct zip code to check test result is it correct. Status code 200, returns correct data. If changing US to UK exmpl.:result-not found, bad request."
			},
			"response": []
		},
		{
			"name": "Request should return validation error when zip code is incorrect",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "20f80627-53a7-4a92-9fa2-5f18091ca039",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Error code should be 400, but not 404\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"404\");\r",
							"});\r",
							"pm.test(\"Error message should be bad request, but not city not found\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"city not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1a4f792c-6b70-40a3-9548-aa6e479735fe",
						"exec": [
							"pm.globals.set(\"zipCodeInvalid\", \"-013032202535\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/weather?zip={{zipCodeInvalid}}&appid={{APIkey}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"weather"
					],
					"query": [
						{
							"key": "zip",
							"value": "{{zipCodeInvalid}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "Zip code dosn't have limits. Would be nice to get message with limits of digits. It's posible to enter negative numbers and message error the same - bad request(404)."
			},
			"response": []
		},
		{
			"name": "Request should return 10 by default cities if cnt is not given",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "28679725-c727-4987-bdcf-a6a9d24bebcc",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});\r",
							"\r",
							"pm.globals.get(\"mainTemp\");\r",
							"\r",
							"pm.globals.get(\"langCode\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "339437ac-4994-424e-8073-36eea7220e72",
						"exec": [
							"pm.globals.get(\"lon\");\r",
							"pm.globals.get(\"lat\");\r",
							"\r",
							"function randomNum(min, max) { \r",
							"  return Math.floor(Math.random() * (max - min + 1) + min);\r",
							"}\r",
							"\r",
							"pm.globals.set(\"cnt\", randomNum(1,50));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/find?lat={{lat}}&lon={{lon}}&cnt={{cnt}}&lang={{langCode}}&units={{mainTemp}}&appid={{APIkey}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"find"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "cnt",
							"value": "{{cnt}}"
						},
						{
							"key": "lang",
							"value": "{{langCode}}"
						},
						{
							"key": "units",
							"value": "{{mainTemp}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "This request returns response with random generated cities number(from 1-50). By default should return 10 cities, if number from 1 til 50 is not choosen, but default returns only 5 cities, but not 10 us is described in API documentation."
			},
			"response": []
		},
		{
			"name": "Request should return correct data by  correct bboxTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eca5b1dd-9a63-4c75-84c4-70f4d9734626",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6c013264-9e33-4220-b6d6-6a8b5dcaa57a",
						"exec": [
							"pm.globals.set(\"bbox\", \"12,32,15,37,15\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://api.openweathermap.org/data/2.5/box/city?bbox={{bbox}}&appid={{APIkey}}",
					"protocol": "http",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"box",
						"city"
					],
					"query": [
						{
							"key": "bbox",
							"value": "{{bbox}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "Test made positive scenario - request returns results what i expected. Response code 200."
			},
			"response": []
		},
		{
			"name": "Request should return error message with square degrees limit when bbox  is more when 25 square degrees",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ceb2b095-e6a5-4980-bd7b-cc7e2e026781",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Requested area is larger than allowed for your account type (25.00 square degrees)\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "26010696-d09e-4f43-a8e5-1d5ef0324dc9",
						"exec": [
							"pm.globals.set(\"tooLargeArea\", \"12,32,15,7\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://api.openweathermap.org/data/2.5/box/city?bbox={{tooLargeArea}}&appid={{APIkey}}",
					"protocol": "http",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"box",
						"city"
					],
					"query": [
						{
							"key": "bbox",
							"value": "{{tooLargeArea}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "This test checks if request returns error message when requested area is larger than allowed ( allowed 25.00 square degrees).\r\n"
			},
			"response": []
		},
		{
			"name": "Request should return error message when instead number is given letter",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9c941774-afbf-45dd-8802-eafa9829b431",
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"is not a float\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "65e5d5ee-cf30-4c10-81ec-6d3b765aa850",
						"exec": [
							"pm.globals.set(\"notAfloat\", \"a,24,12,37\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/box/city?bbox={{notAfloat}}&appid={{APIkey}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"box",
						"city"
					],
					"query": [
						{
							"key": "bbox",
							"value": "{{notAfloat}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "This test checks if request returns error message when requested area is letter or *,-,+,/,@,$,%,^,&. "
			},
			"response": []
		},
		{
			"name": "Request should return error message is not a float when instead number is given #, but returns  401 - unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "90ecc130-d5d7-4bd4-bf10-da5efcd37f1e",
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"pm.test(\"Error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Invalid API key\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "366d23c4-65a0-4d4d-b0b1-4d52f45da016",
						"exec": [
							"pm.globals.set(\"bboxIncluded#\", \"#,24,12,37\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.openweathermap.org/data/2.5/box/city?bbox={{bboxIncluded#}}&appid={{APIkey}}",
					"host": [
						"api",
						"openweathermap",
						"org"
					],
					"path": [
						"data",
						"2.5",
						"box",
						"city"
					],
					"query": [
						{
							"key": "bbox",
							"value": "{{bboxIncluded#}}"
						},
						{
							"key": "appid",
							"value": "{{APIkey}}"
						}
					]
				},
				"description": "This test checks if request returns error code 400(bad request) and error message about not a float value when in requested area is #. Returns error code 401-Unautorized, message-Invalid API key..It's a bug."
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}